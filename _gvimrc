" _gvimrc file for windows v1.0.14 , 2021-12-13 by Kenneth Aaron
" Source: https://github.com/flyingrhinonz/gvimrc_windows

syntax on
colorscheme torte

" Syntax highlighting makes reading some text impossible in vimdiff mode.
" Disable syntax highlighting in vimdiff mode:
if &diff
    syntax off
endif

set bg=dark
set autoindent
set nobackup
set number
set showcmd
set showmatch

set scrolloff=5
    " ^ Number of lines to display above/below when scrolling lines
set sidescroll=8
    " ^ Number of chars to scroll horizontally. Default is half a page.
set sidescrolloff=8
    " ^ Number of chars to display at the left/right edge before scrolling horizontally.
set hlsearch
    " ^ Highlight search results
set incsearch
    " ^ Show search results as you type
set backspace=indent,eol,start
    " ^ Sensible backspace behavior
    "   See here: https://vi.stackexchange.com/questions/2162/why-doesnt-the-backspace-key-work-in-insert-mode
    "   indent    allow backspacing over autoindent
    "   eol       allow backspacing over line breaks (join lines)
    "   allow backspacing over the start of insert; CTRL-W and CTRL-U stop once at the start of insert


set encoding=utf-8
    " ^ Display unicode chars. Without this you'd see weird output of degraded chars
    "   For windows gvim this needs to go high up in the config file otherwise you'll
    "   get error messages from gvim during loading if any unicode appears before it.

" The following changes come from making everything tabs->spaces, not only python.
" This effectively replaces the commented python code later on:
set tabstop=4
    " ^ Tab key is now 4 chars rather than the traditional 8 chars which wastes
    "       too much space when indenting.
set expandtab
    " ^ Inserts spaces whenever TAB key is pressed
    "       If you want to insert a real tab char - use:  ctrl-v <TAB_KEY>
set shiftwidth=4
    " ^ Sets the number of space characters inserted for indentation
set softtabstop=4
    " ^ Makes the spaces feel like real tabs

set list
    " ^ list & listchars mostly useful to find leading tabs at the beginning of python code
set listchars=extends:>,precedes:<,nbsp:☠,tab:▸␣
    " ^ The chars are:
    "   extends -   Show the '>' char in long nonwrapped lines at the right
    "   precedes -  Show the '<' char in long nonwrappled lines at the left
    "   nbsp -      Show the special char instead of a non-breakable space
    "   tab -       Shows the special char instead of the tab char

highlight NonText guifg=yellow guibg=blue
    " ^ Change the colors for the nontext listchars I configured above (extends & precedes)
    "   To view the current highlight groups and their set colors use:
    "       :so $VIMRUNTIME/syntax/hitest.vim   inside vim

highlight EndOfBuffer guifg=grey guibg=black
    " ^ To set the color of the:  '~'  at the end of the file (only supported in vim 8+)

set nowrap
    " ^ We can disable default wrap because I've now got indicators for lines
    "       that are longer than the screen fits.


" The following section defines the line numbering colors.
" Note - the colors defined here work well when viewed inside a 256+ color terminal.
"   If you edit a file directly on the device console you will most likely see degraded colors
"   or even missing/wrong colors. Don't be surprised by this and try to fix vimrc, it's probably
"   the console that can't handle the colors defined herein.
set cursorline
    " ^ Enables cursor line position tracking
highlight clear CursorLine
    " ^ Removes the underline caused by enabling cursorline
highlight clear CursorLineNr
    " ^ In new vim versions the cursor line number is separated from CursorLine
    "       and without this the cursor line number will still be underlined.
highlight LineNr guifg=blue
highlight CursorLineNR guibg=red guifg=white
    " ^ Sets the line numbering to a clear background


" Support for yaml format:
autocmd Filetype yaml setlocal
    \ expandtab
    \ tabstop=2
    \ shiftwidth=2
    \ softtabstop=2


" Extra white space tips from here:
" http://vim.wikia.com/wiki/Highlight_unwanted_spaces :
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
    " ^ Any whitespace - even on empty lines
" match ExtraWhitespace /\S\zs\s\+$/
    " ^ Whitespace only after some text
" autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
    " ^ Any whitespace
" autocmd InsertLeave * match ExtraWhitespace /\S\zs\s\+$/
    " ^ Only after some text
" autocmd BufWinLeave * call clearmatches()


autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
    " ^ Disable auto insert comment on a new line after a comment in the line above


set guifont=Consolas:h10
    " ^ Set a sensible windows 10 font and font size

autocmd GUIEnter * simalt ~X
    " ^ Start vim with window maximized, default size is too small

autocmd GUIEnter * set vb t_vb=
    " ^ Disable annoying noises from vim
    "   Documented here: https://vim.fandom.com/wiki/Disable_beeping

set guioptions+=a
    " ^ Text marked will be automatically copied to the clipboard
    "   This includes every method - mark with the mouse, 'v' for visual selection, etc

" Make shift-insert work like in Xterm:
map <S-Insert> <MiddleMouse>
map! <S-Insert> <MiddleMouse>

set mouse=
    " ^ Disable mouse operations - useful if you don't want cursor repositioning
    "   when you click inside gvim window. Ken added 2021-07-07.

autocmd FileType text setlocal textwidth=0
    " ^ Override the stupid wrap lines autocmd:
    "   'FileType text setlocal textwidth=78'    in the file:
    "       'c: / program files (x86) / vim / vim82 / vimrc_example.vim'


" The following settings are specific to windows.
" Use the commands:
"   :echo $HOME
"   :echo $VIM
"   :echo $MYVIMRC
"       to show the respective paths.

" The next set of commands tidy up the default files/dirs so that vim-style files
" don't get left all over the place:

set backupdir=c:/temp/vimtemp//
    " ^ Put the backup file in a sensible directory
    "   This dir needs to exist though!
    "   The // at the end means that the directory information will be saved in the filename
    "   so the backup info for /work/myfile.txt will be stored in /tmp/work/myfile.txt

set directory=c:/temp/vimtemp//
    " ^ Put the swap file in a sensible directory

"set undodir=c:/temp/vimtemp//
    " ^ Put the persistent undo file in a sensible directory
    "   Actually we're not using this option because in the next command we're
    "   disabling persistent undo completely.

set noundofile
    " ^ Disable persistent undo

set viminfo='1000,nc:\\temp\\vimtemp\\_viminfo
    " ^ Put the viminfo file in a sensible directory


" Other useful settings I've found but don't use regularly:
" set ff=unix       " Sets the new line format (cr /crlf)
" set filetype=on   " By default it's on - type  :filetype  to view current setting

